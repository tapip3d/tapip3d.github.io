<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TAPIP3D - Poster Demo</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      /* 更新色彩方案，与 index.html 一致 */
      --primary: #5E2B97;
      --primary-dark: #4A2075;
      --primary-gradient: linear-gradient(90deg, #5E2B97, #8E44AD);
      /* 修改为纯白色背景 */
      --bg-gradient: linear-gradient(160deg, #FFFFFF 0%, #FFFFFF 100%);
      --accent: #8E44AD;
      --text: #222222;
      --text-light: #666666;
      --bg: #FFFFFF;
      --bg-light: #FFFFFF;
      --card-bg: rgba(255, 255, 255, 0.95);
      --shadow: 0 2px 12px rgba(0,0,0,0.05);
      --glow: 0 0 20px rgba(94, 43, 151, 0.3);
      
      /* 间距 */
      --space-sm: 8px;
      --space-md: 16px;
      --space-lg: 24px;
      --space-xl: 48px;
      
      /* 圆角 */
      --radius-md: 12px;
      --radius-lg: 20px;
      
      --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Inter', sans-serif;
      color: var(--text);
      line-height: 1.6;
      background: var(--bg-gradient);
      min-height: 100vh;
      padding: 0;
      margin: 0;
      overflow-x: hidden;
    }
    
    .poster-container {
      width: 100%;
      max-width: 1600px;
      margin: 0 auto;
      padding: var(--space-xl) var(--space-md);
      position: relative;
    }
    
    .poster-header {
      text-align: center;
      margin-bottom: var(--space-xl);
    }
    
    .poster-title {
      font-size: 3.5rem;
      font-weight: 800;
      margin-bottom: var(--space-sm);
      background: var(--primary-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-fill-color: transparent;
      letter-spacing: -1px;
    }
    
    /* 主展示区 */
    .showcase-grid {
      display: grid;
      /* 修改列比例，左侧mp4变窄，右侧3dviz更宽 */
      grid-template-columns: 0.8fr auto 1.2fr;
      grid-template-rows: repeat(2, 400px);
      /* Adjusted gap */
      gap: var(--space-lg);
      margin-bottom: var(--space-xl);
    }
    
    @media (max-width: 1200px) {
      .showcase-grid {
        /* Stack pairs: Video, Arrow, PointCloud */
        grid-template-columns: 1fr;
        grid-template-rows: 400px auto 400px 400px auto 400px;
        gap: var(--space-md); /* Smaller gap */
      }
    }
    
    .showcase-item {
      position: relative;
      border-radius: var(--radius-lg);
      overflow: hidden;
      background: var(--card-bg);
      box-shadow: var(--shadow);
      transition: var(--transition);
    }
    
    .showcase-item:hover {
      transform: translateY(-5px);
      box-shadow: var(--shadow), var(--glow);
    }
    
    .showcase-content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    
    .video-container,
    .pointcloud-iframe-container {
      width: 100%;
      height: 100%;
      position: relative;
    }
    
    .video-container video,
    .pointcloud-iframe-container iframe {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border: none;
    }
    
    /* 标签 */
    /* .content-label { ... } */
    
    /* Arrow Indicator - 简约设计 */
    .arrow-indicator {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0 var(--space-md);
      position: relative;
    }
    
    .arrow-line {
      position: relative;
      width: 50px;
      /* 增加高度使箭头更粗壮 */
      height: 3px;
      /* 使用与 index.html 相同的紫色渐变 */
      background: linear-gradient(90deg, #5E2B97, #8E44AD);
      /* 增加圆角 */
      border-radius: 3px;
      /* 调整阴影效果 */
      box-shadow: 0 2px 10px rgba(94, 43, 151, 0.25);
    }
    
    .arrow-line::after {
      content: '';
      position: absolute;
      /* 完全接壤，使直线与尖端衔接 */
      right: -2px;
      top: 50%;
      /* 增大尖端尺寸 */
      width: 12px;
      height: 12px;
      /* 增加边框厚度与主线一致 */
      border-top: 3px solid transparent;
      border-right: 3px solid transparent;
      border-bottom: 3px solid #8E44AD;
      border-left: 3px solid #8E44AD;
      /* 微调旋转角度 */
      transform: translateY(-50%) rotate(-135deg);
    }
    
    /* 移除动画效果，保持海报风格简洁 */
    /* @keyframes pulse { ... } */
    
    /* 移除动画 */
    .arrow-line {
      /* 移除 animation 属性 */
    }

    @media (max-width: 1200px) {
       .arrow-indicator {
         padding: var(--space-md) 0;
       }
       
       .arrow-line {
         width: 3px;
         height: 30px;
       }
       
       .arrow-line::after {
         /* 垂直箭头调整 */
         right: 50%;
         top: -2px;
         transform: translateX(50%) rotate(45deg);
       }
    }
    
    /* 控制面板 - 海报风格 */
    .controls-container {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: var(--space-md);
      align-items: center;
      justify-content: center;
      padding: var(--space-md);
      background: rgba(255, 255, 255, 0.9);
      border-radius: 40px;
      backdrop-filter: blur(10px);
      box-shadow: var(--shadow);
      width: max-content;
      z-index: 25;
    }
    
    .control-btn {
      background: var(--primary-gradient);
      border: none;
      color: white;
      width: 46px;
      height: 46px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
      box-shadow: 0 2px 8px rgba(94, 43, 151, 0.2);
    }
    
    .control-btn:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 12px rgba(94, 43, 151, 0.3);
    }
    
    .control-btn svg {
      width: 24px;
      height: 24px;
      fill: currentColor;
    }
    
    .control-label {
      font-size: 1rem;
      color: var(--text);
      font-weight: 500;
      pointer-events: none;
    }
    
    /* 加载叠层 - 改为白色背景 */
    #loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: #FFFFFF;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      transition: opacity 0.5s ease, visibility 0.5s ease;
    }
    
    .spinner {
      width: 60px;
      height: 60px;
      border: 3px solid rgba(59, 130, 246, 0.2);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      margin-bottom: var(--space-md);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* 水印 */
    .watermark {
      position: fixed;
      bottom: var(--space-md);
      right: var(--space-md);
      font-size: 12px;
      font-weight: 600;
      color: var(--text-light);
      opacity: 0.7;
      pointer-events: none;
      z-index: 20;
    }
    
    /* 效果 */
    .fade-out {
      opacity: 0;
      visibility: hidden;
    }
    
    /* 新增: 设置面板相关样式 */
    #settings-panel {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255, 255, 255, 0.95);
      padding: 20px;
      border-radius: var(--radius-lg);
      width: 800px;
      max-width: 90%;
      pointer-events: auto;
      box-shadow: var(--shadow);
      backdrop-filter: blur(4px);
      border: 1px solid var(--border);
      z-index: 30;
      transition: transform 0.3s ease, opacity 0.3s ease;
      display: none;
      opacity: 0;
      max-height: 80vh;
      overflow-y: auto;
    }
    
    #settings-panel.visible {
      display: block;
      opacity: 1;
      animation: slideUp 0.3s ease forwards;
    }
    
    @keyframes slideUp {
      from {
        transform: translate(-50%, 20px);
        opacity: 0;
      }
      to {
        transform: translate(-50%, 0);
        opacity: 1;
      }
    }
    
    .settings-group {
      margin-bottom: 16px;
    }
    
    .settings-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    }
    
    .settings-header h3 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
      color: var(--primary);
    }
    
    .settings-close {
      background: none;
      border: none;
      font-size: 22px;
      cursor: pointer;
      color: var(--text-light);
      padding: 0;
      width: 30px;
      height: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
    }
    
    .settings-close:hover {
      background: rgba(0, 0, 0, 0.05);
    }
    
    .settings-body {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
      gap: 20px;
    }
    
    .settings-group h4 {
      margin: 0 0 10px 0;
      font-size: 14px;
      font-weight: 600;
      color: var(--text);
    }
    
    .slider-container {
      display: flex;
      flex-direction: column;
      margin-bottom: 12px;
    }
    
    .slider-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 4px;
    }
    
    .slider-label {
      font-size: 13px;
      color: var(--text-light);
    }
    
    .slider-value {
      font-size: 13px;
      font-weight: 500;
      color: var(--primary);
    }
    
    input[type="range"] {
      width: 100%;
      height: 4px;
      -webkit-appearance: none;
      background: rgba(0, 0, 0, 0.1);
      border-radius: 2px;
      outline: none;
    }
    
    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      background: var(--primary);
      cursor: pointer;
    }
    
    .toggle-wrapper {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 12px;
    }
    
    .toggle-wrapper .toggle-label {
      font-size: 13px;
      color: var(--text-light);
    }
    
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 40px;
      height: 20px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.1);
      transition: .4s;
      border-radius: 20px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 16px;
      width: 16px;
      left: 2px;
      bottom: 2px;
      background: var(--bg);
      transition: .4s;
      border-radius: 50%;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    input:checked + .toggle-slider {
      background: var(--primary);
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(20px);
    }
    
    /* 新增: 设置开关按钮 */
    #settings-toggle {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--primary-gradient);
      color: white;
      border: none;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 2px 10px rgba(94, 43, 151, 0.3);
      transition: var(--transition);
      z-index: 20;
    }
    
    #settings-toggle:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(94, 43, 151, 0.4);
    }
    
    #settings-toggle svg {
      width: 24px;
      height: 24px;
      fill: currentColor;
    }
    
    /* 新增: 设置样式 */
    .setting {
      margin-bottom: 12px;
    }
    
    .setting label {
      font-size: 13px;
      color: var(--text-light);
      margin-bottom: 4px;
      display: inline-block;
    }
    
    .setting-value {
      font-size: 13px;
      font-weight: 500;
      color: var(--primary);
      margin-left: 8px;
    }
    
    input[type="checkbox"] {
      width: 16px;
      height: 16px;
      accent-color: var(--primary);
      vertical-align: middle;
    }
    
    /* 新增视频标签样式 */
    .dataset-tabs {
      display: flex;
      margin-bottom: 20px;
      border-bottom: 1px solid #eee;
    }
    
    .dataset-tab {
      padding: 8px 16px;
      background: none;
      border: none;
      border-bottom: 3px solid transparent;
      font-size: 15px;
      font-weight: 500;
      color: var(--text-light);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .dataset-tab.active {
      color: var(--primary);
      border-bottom-color: var(--primary);
    }
    
    /* 数据集设置面板容器 */
    .dataset-settings-container {
      position: relative;
    }
    
    .dataset-settings {
      display: none;
    }
    
    .dataset-settings.active {
      display: block;
    }
    
    /* 按钮样式 */
    .apply-all-btn {
      background: var(--primary-gradient);
      color: white;
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      font-size: 12px;
      cursor: pointer;
      margin-left: 10px;
      transition: var(--transition);
    }
    
    .apply-all-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 2px 8px rgba(94, 43, 151, 0.3);
    }
  </style>
</head>
<body>
  <div class="poster-container">
    <div class="poster-header">
      <h1 class="poster-title">TAPIP3D</h1>
    </div>
  
    <div class="showcase-grid">
      <!-- Row 1 -->
      <!-- 视频1 -->
      <div class="showcase-item">
        <div class="showcase-content">
          <div class="video-container" id="video-container-1">
            <canvas id="source-video-1" width="640" height="360"></canvas>
          </div>
        </div>
      </div>
      <!-- Arrow 1 -->
      <div class="arrow-indicator">
        <div class="arrow-line"></div>
      </div>
      <!-- 点云1 (IFrame) -->
      <div class="showcase-item">
        <div class="showcase-content">
          <div class="pointcloud-iframe-container">
            <iframe id="pointcloud-iframe-1" src="" allow="autoplay"></iframe>
          </div>
        </div>
      </div>
      
      <!-- Row 2 -->
      <!-- 视频2 -->
      <div class="showcase-item">
        <div class="showcase-content">
          <div class="video-container" id="video-container-2">
            <canvas id="source-video-2" width="640" height="360"></canvas>
          </div>
        </div>
      </div>
      <!-- Arrow 2 -->
      <div class="arrow-indicator">
        <div class="arrow-line"></div>
      </div>
      <!-- 点云2 (IFrame) -->
      <div class="showcase-item">
        <div class="showcase-content">
          <div class="pointcloud-iframe-container">
            <iframe id="pointcloud-iframe-2" src="" allow="autoplay"></iframe>
          </div>
        </div>
      </div>
    </div>

    <!-- 控制面板 -->
    <div class="controls-container" id="control-panel">
      <button id="play-pause-btn" class="control-btn">
        <svg viewBox="0 0 24 24" id="play-icon">
          <path d="M8 5v14l11-7z"/>
        </svg>
        <svg viewBox="0 0 24 24" id="pause-icon" style="display: none;">
          <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
        </svg>
      </button>
      <button id="reset-btn" class="control-btn">
        <svg viewBox="0 0 24 24">
          <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"/>
        </svg>
      </button>
      <span class="control-label">Playback Controls</span>
    </div>
    
    <!-- 加载叠层 -->
    <div id="loading-overlay">
      <div class="spinner"></div>
      <div id="loading-text" style="font-size: 1.2rem; font-weight: 300; color: var(--text);">Loading video and visualization data...</div>
    </div>
    
    <!-- 水印 -->
    <div class="watermark">TAPIP3D · Demo</div>
    
    <!-- 新增: 设置按钮 -->
    <button id="settings-toggle">
      <svg viewBox="0 0 24 24">
        <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.04,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
      </svg>
    </button>
    
    <!-- 新增: 设置面板 -->
    <div id="settings-panel">
      <div class="settings-header">
        <h3>可视化设置</h3>
        <button class="settings-close">&times;</button>
      </div>
      
      <!-- 新增: 数据集选项卡 -->
      <div class="dataset-tabs">
        <button class="dataset-tab active" data-dataset="1">数据集 1</button>
        <button class="dataset-tab" data-dataset="2">数据集 2</button>
        <button class="apply-all-btn" id="apply-to-all">应用到所有</button>
      </div>
      
      <div class="dataset-settings-container">
        <!-- 数据集1的设置 -->
        <div class="dataset-settings active" data-dataset="1">
          <div class="settings-body">
            <div class="settings-group">
              <h4>点云设置</h4>
              <div class="setting">
                <label for="point-size-1">点大小:</label>
                <input type="range" id="point-size-1" min="0.01" max="0.1" step="0.005" value="0.03" data-dataset="1" data-setting-type="pointCloud" data-setting="size">
                <span class="setting-value">0.03</span>
              </div>
              <div class="setting">
                <label for="point-opacity-1">点透明度:</label>
                <input type="range" id="point-opacity-1" min="0.1" max="1" step="0.05" value="1" data-dataset="1" data-setting-type="pointCloud" data-setting="opacity">
                <span class="setting-value">1.00</span>
              </div>
              <div class="setting">
                <label for="max-depth-1">最大深度:</label>
                <input type="range" id="max-depth-1" min="1" max="20" step="0.5" value="10" data-dataset="1" data-setting-type="pointCloud" data-setting="maxDepth">
                <span class="setting-value">10.00</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>轨迹设置</h4>
              <div class="setting">
                <label for="show-trajectory-1">显示轨迹:</label>
                <input type="checkbox" id="show-trajectory-1" checked data-dataset="1" data-setting-type="trajectory" data-setting="show">
              </div>
              <div class="setting">
                <label for="trajectory-width-1">轨迹宽度:</label>
                <input type="range" id="trajectory-width-1" min="1" max="10" step="0.5" value="3" data-dataset="1" data-setting-type="trajectory" data-setting="width">
                <span class="setting-value">3.00</span>
              </div>
              <div class="setting">
                <label for="marker-size-1">标记大小:</label>
                <input type="range" id="marker-size-1" min="0.001" max="0.03" step="0.001" value="0.01" data-dataset="1" data-setting-type="trajectory" data-setting="markerSize">
                <span class="setting-value">0.01</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>关键帧设置</h4>
              <div class="setting">
                <label for="show-keyframes-1">显示关键帧:</label>
                <input type="checkbox" id="show-keyframes-1" checked data-dataset="1" data-setting-type="keyframes" data-setting="show">
              </div>
              <div class="setting">
                <label for="keyframe-interval-1">关键帧间隔:</label>
                <input type="range" id="keyframe-interval-1" min="5" max="60" step="5" value="20" data-dataset="1" data-setting-type="keyframes" data-setting="interval">
                <span class="setting-value">20</span>
              </div>
              <div class="setting">
                <label for="keyframe-opacity-1">关键帧透明度:</label>
                <input type="range" id="keyframe-opacity-1" min="0.1" max="1" step="0.05" value="0.5" data-dataset="1" data-setting-type="keyframes" data-setting="opacity">
                <span class="setting-value">0.50</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>相机设置</h4>
              <div class="setting">
                <label for="show-camera-1">显示相机框:</label>
                <input type="checkbox" id="show-camera-1" checked data-dataset="1" data-setting-type="camera" data-setting="show">
              </div>
              <div class="setting">
                <label for="camera-size-1">相机框大小:</label>
                <input type="range" id="camera-size-1" min="0.1" max="0.5" step="0.05" value="0.2" data-dataset="1" data-setting-type="camera" data-setting="size">
                <span class="setting-value">0.20</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>播放设置</h4>
              <div class="setting">
                <label for="playback-fps-1">帧率(FPS):</label>
                <input type="range" id="playback-fps-1" min="1" max="60" step="1" value="30" data-dataset="1" data-setting-type="playback" data-setting="fps">
                <span class="setting-value">30</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 数据集2的设置 -->
        <div class="dataset-settings" data-dataset="2">
          <div class="settings-body">
            <div class="settings-group">
              <h4>点云设置</h4>
              <div class="setting">
                <label for="point-size-2">点大小:</label>
                <input type="range" id="point-size-2" min="0.01" max="0.1" step="0.005" value="0.03" data-dataset="2" data-setting-type="pointCloud" data-setting="size">
                <span class="setting-value">0.03</span>
              </div>
              <div class="setting">
                <label for="point-opacity-2">点透明度:</label>
                <input type="range" id="point-opacity-2" min="0.1" max="1" step="0.05" value="1" data-dataset="2" data-setting-type="pointCloud" data-setting="opacity">
                <span class="setting-value">1.00</span>
              </div>
              <div class="setting">
                <label for="max-depth-2">最大深度:</label>
                <input type="range" id="max-depth-2" min="1" max="20" step="0.5" value="10" data-dataset="2" data-setting-type="pointCloud" data-setting="maxDepth">
                <span class="setting-value">10.00</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>轨迹设置</h4>
              <div class="setting">
                <label for="show-trajectory-2">显示轨迹:</label>
                <input type="checkbox" id="show-trajectory-2" checked data-dataset="2" data-setting-type="trajectory" data-setting="show">
              </div>
              <div class="setting">
                <label for="trajectory-width-2">轨迹宽度:</label>
                <input type="range" id="trajectory-width-2" min="1" max="10" step="0.5" value="3" data-dataset="2" data-setting-type="trajectory" data-setting="width">
                <span class="setting-value">3.00</span>
              </div>
              <div class="setting">
                <label for="marker-size-2">标记大小:</label>
                <input type="range" id="marker-size-2" min="0.001" max="0.03" step="0.001" value="0.01" data-dataset="2" data-setting-type="trajectory" data-setting="markerSize">
                <span class="setting-value">0.01</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>关键帧设置</h4>
              <div class="setting">
                <label for="show-keyframes-2">显示关键帧:</label>
                <input type="checkbox" id="show-keyframes-2" checked data-dataset="2" data-setting-type="keyframes" data-setting="show">
              </div>
              <div class="setting">
                <label for="keyframe-interval-2">关键帧间隔:</label>
                <input type="range" id="keyframe-interval-2" min="5" max="60" step="5" value="20" data-dataset="2" data-setting-type="keyframes" data-setting="interval">
                <span class="setting-value">20</span>
              </div>
              <div class="setting">
                <label for="keyframe-opacity-2">关键帧透明度:</label>
                <input type="range" id="keyframe-opacity-2" min="0.1" max="1" step="0.05" value="0.5" data-dataset="2" data-setting-type="keyframes" data-setting="opacity">
                <span class="setting-value">0.50</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>相机设置</h4>
              <div class="setting">
                <label for="show-camera-2">显示相机框:</label>
                <input type="checkbox" id="show-camera-2" checked data-dataset="2" data-setting-type="camera" data-setting="show">
              </div>
              <div class="setting">
                <label for="camera-size-2">相机框大小:</label>
                <input type="range" id="camera-size-2" min="0.1" max="0.5" step="0.05" value="0.2" data-dataset="2" data-setting-type="camera" data-setting="size">
                <span class="setting-value">0.20</span>
              </div>
            </div>
            
            <div class="settings-group">
              <h4>播放设置</h4>
              <div class="setting">
                <label for="playback-fps-2">帧率(FPS):</label>
                <input type="range" id="playback-fps-2" min="1" max="60" step="1" value="30" data-dataset="2" data-setting-type="playback" data-setting="fps">
                <span class="setting-value">30</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    class PosterDemoManager {
      constructor() {
        this.isPlaying = false;
        
        this.ui = {
          playPauseBtn: document.getElementById('play-pause-btn'),
          resetBtn: document.getElementById('reset-btn'),
          settingsBtn: document.getElementById('settings-btn'),
          playIcon: document.getElementById('play-icon'),
          pauseIcon: document.getElementById('pause-icon'),
          loadingOverlay: document.getElementById('loading-overlay'),
          loadingText: document.getElementById('loading-text'),
          settingsPanel: document.getElementById('settings-panel'),
          sourceVideo1: document.getElementById('source-video-1'),
          sourceVideo2: document.getElementById('source-video-2'),
          iframe1: document.getElementById('pointcloud-iframe-1'),
          iframe2: document.getElementById('pointcloud-iframe-2')
        };

        this.iframes = [
            this.ui.iframe1,
            this.ui.iframe2
        ];

        // 初始化canvas 2D上下文
        this.videoCtx = [
          this.ui.sourceVideo1.getContext('2d'),
          this.ui.sourceVideo2.getContext('2d')
        ];
        
        // 创建临时视频元素用于加载和提取帧
        this.tmpVideos = [
          document.createElement('video'),
          document.createElement('video')
        ];
        
        // 帧数据相关属性
        this.frameImages = [[], []]; // 存储两个视频的所有帧图像
        this.currentFrameIndex = [0, 0]; // 当前显示的帧索引
        this.isPlaying = false;
        this.playbackRate = [1.0, 1.0]; // 播放速率
        this.totalFrames = {set1: 0, set2: 0};
        this.fps = [30, 30]; // 默认帧率
        this.lastFrameTime = 0;
        this.animationId = null;
        
        // 加载状态
        this.videoLoaded = [false, false];
        this.iframeLoaded = [false, false];

        this.dataPaths = { // Store data paths for iframes
            set1: '',
            set2: ''
        };

        this.videoPaths = { // Store video paths
            set1: '',
            set2: ''
        };

        this.frameExtractionStarted = [false, false];

        this.initEventListeners();
        this.loadConfigAndInit();
      }

      initEventListeners() {
        this.ui.playPauseBtn.addEventListener('click', () => this.togglePlayback());
        this.ui.resetBtn.addEventListener('click', () => this.resetVisualization());
        
        // 监听来自iframe的消息，处理加载完成等事件
        window.addEventListener('message', (event) => {
          if (event.data && event.data.type === 'viz_loaded') {
            console.log('Visualization loaded message received');
            
            // 确定是哪个iframe发送的消息
            if (event.source === this.ui.iframe1.contentWindow) {
              this.iframeLoaded[0] = true;
              console.log('iframe 1 已加载完成');
            } else if (event.source === this.ui.iframe2.contentWindow) {
              this.iframeLoaded[1] = true;
              console.log('iframe 2 已加载完成');
            }
            
            this.checkAllLoaded();
          }
        });
      }
      
      // 直接从视频中提取帧
      loadVideoFrames(videoIndex, videoPath) {
        let tmpVideo = this.tmpVideos[videoIndex];
        
        // 清除之前的事件监听器
        const newVideo = document.createElement('video');
        this.tmpVideos[videoIndex] = newVideo;
        tmpVideo = newVideo;
        
        tmpVideo.crossOrigin = "anonymous"; // 处理跨域问题
        tmpVideo.muted = true;
        
        // 添加标志位防止重复提取
        this.frameExtractionStarted = this.frameExtractionStarted || [false, false];
        
        this.ui.loadingText.textContent = `加载视频${videoIndex+1}...`;
        
        // 监听元数据加载完成事件
        tmpVideo.addEventListener('loadedmetadata', () => {
          console.log(`视频${videoIndex+1}元数据加载完成，时长:`, tmpVideo.duration);
          
          // 估计总帧数（基于30fps）
          const estimatedFrames = Math.ceil(tmpVideo.duration * 30);
          this.totalFrames[`set${videoIndex+1}`] = estimatedFrames;
          console.log(`视频${videoIndex+1}估计帧数:`, estimatedFrames);
          
          // 设置视频为可播放状态
          tmpVideo.currentTime = 0;
        });
        
        // 监听视频可以播放事件
        tmpVideo.addEventListener('canplay', () => {
          console.log(`视频${videoIndex+1}可以播放`);
          
          // 只有在未开始提取时才启动提取
          if (!this.frameExtractionStarted[videoIndex]) {
            console.log(`开始为视频${videoIndex+1}提取帧`);
            this.frameExtractionStarted[videoIndex] = true;
            // 开始提取帧
            this.extractFrames(videoIndex, tmpVideo);
          }
        });
        
        // 监听错误事件
        tmpVideo.addEventListener('error', (e) => {
          console.error(`视频${videoIndex+1}加载失败:`, e);
          this.ui.loadingText.textContent = `加载视频${videoIndex+1}失败`;
        });
        
        // 设置视频源
        tmpVideo.src = videoPath;
        tmpVideo.load();
      }
      
      // 提取视频帧
      extractFrames(videoIndex, videoElement) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // 设置画布大小
        canvas.width = 640;  // 使用固定尺寸
        canvas.height = 360;
        
        // 总帧数 - 限制最大帧数为120以提高性能
        const totalFrames = Math.min(this.totalFrames[`set${videoIndex+1}`], 120);
        this.totalFrames[`set${videoIndex+1}`] = totalFrames; // 更新总帧数
        
        const duration = videoElement.duration;
        const frameStep = duration / totalFrames;
        
        // 清空帧图像数组
        this.frameImages[videoIndex] = new Array(totalFrames);
        
        // 当前处理的帧索引
        let currentFrame = 0;
        let extractionFailed = false;
        
        console.log(`视频${videoIndex+1}准备提取${totalFrames}帧，时长:${duration}秒，帧间隔:${frameStep}秒`);
        
        const extractNextFrame = () => {
          if (extractionFailed) {
            console.error(`视频${videoIndex+1}帧提取失败，中止提取`);
            return;
          }
          
          if (currentFrame >= totalFrames) {
            console.log(`视频${videoIndex+1}的所有帧提取完成，共${totalFrames}帧`);
            this.videoLoaded[videoIndex] = true;
            
            // 绘制第一帧
            this.drawFrame(videoIndex, 0);
            
            // 检查是否所有视频帧都已加载
            this.checkAllLoaded();
            return;
          }
          
          // 计算当前帧对应的视频时间点
          const timePoint = currentFrame * frameStep;
          
          // 更新加载状态
          this.ui.loadingText.textContent = `视频${videoIndex+1}帧提取: ${Math.round((currentFrame/totalFrames)*100)}%`;
          
          try {
            // 设置视频时间
            videoElement.currentTime = timePoint;
            
            // 由于视频时间设置是异步的，需要使用事件监听等待时间更新
            const onSeeked = () => {
              try {
                // 移除事件监听器
                videoElement.removeEventListener('seeked', onSeeked);
                
                // 在画布上绘制当前视频帧
                ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                
                // 将画布转换为图像数据并存储
                const imageData = canvas.toDataURL('image/jpeg', 0.8);
                const image = new Image();
                
                image.onload = () => {
                  this.frameImages[videoIndex][currentFrame] = image;
                  
                  // 提取下一帧
                  currentFrame++;
                  setTimeout(extractNextFrame, 10);
                };
                
                image.onerror = () => {
                  console.error(`视频${videoIndex+1}的第${currentFrame}帧图像创建失败`);
                  extractionFailed = true;
                  this.frameImages[videoIndex][currentFrame] = null;
                  currentFrame++;
                  setTimeout(extractNextFrame, 10);
                };
                
                image.src = imageData;
              } catch (err) {
                console.error(`视频${videoIndex+1}帧${currentFrame}处理错误:`, err);
                extractionFailed = true;
                currentFrame++;
                setTimeout(extractNextFrame, 10);
              }
            };
            
            videoElement.addEventListener('seeked', onSeeked);
            
            // 设置超时保护，防止卡住
            setTimeout(() => {
              if (videoElement.currentTime !== timePoint) {
                videoElement.removeEventListener('seeked', onSeeked);
                console.warn(`视频${videoIndex+1}帧${currentFrame}定位超时，跳过`);
                currentFrame++;
                setTimeout(extractNextFrame, 10);
              }
            }, 2000);
            
          } catch (err) {
            console.error(`视频${videoIndex+1}帧${currentFrame}提取错误:`, err);
            extractionFailed = true;
            currentFrame++;
            setTimeout(extractNextFrame, 10);
          }
        };
        
        // 开始提取帧
        extractNextFrame();
      }
      
      // 绘制指定索引的帧
      drawFrame(videoIndex, frameIndex) {
        const frames = this.frameImages[videoIndex];
        const ctx = this.videoCtx[videoIndex];
        const canvas = videoIndex === 0 ? this.ui.sourceVideo1 : this.ui.sourceVideo2;
        
        if (!frames || !frames[frameIndex] || !ctx) return;
        
        // 清除画布
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // 绘制图像
        ctx.drawImage(frames[frameIndex], 0, 0, canvas.width, canvas.height);
        
        // 更新当前帧索引
        this.currentFrameIndex[videoIndex] = frameIndex;
      }
      
      // 启动动画循环
      startAnimationLoop() {
        if (this.animationId) return; // 避免重复启动
        
        this.lastFrameTime = performance.now();
        this.isPlaying = true;
        
        const animate = (timestamp) => {
          if (!this.isPlaying) return;
          
          const deltaTime = timestamp - this.lastFrameTime;
          
          // 对每个视频处理
          for (let i = 0; i < 2; i++) {
            // 计算基于fps和播放速率的帧间隔
            const frameInterval = 1000 / (this.fps[i] * this.playbackRate[i]);
            
            if (deltaTime >= frameInterval) {
              // 计算下一帧
              this.currentFrameIndex[i] = (this.currentFrameIndex[i] + 1) % this.totalFrames[`set${i+1}`];
              
              // 绘制帧
              this.drawFrame(i, this.currentFrameIndex[i]);
              
              // 更新sync比例
              const frameRatio = this.currentFrameIndex[i] / (this.totalFrames[`set${i+1}`] - 1);
              
              // 发送同步消息到iframe
              if (this.iframes[i] && this.iframes[i].contentWindow) {
                this.iframes[i].contentWindow.postMessage({ 
                  command: 'seek', 
                  payload: frameRatio,
                  playbackRate: this.playbackRate[i]
                }, '*');
              }
              
              this.lastFrameTime = timestamp;
            }
          }
          
          this.animationId = requestAnimationFrame(animate);
        };
        
        this.animationId = requestAnimationFrame(animate);
      }
      
      // 停止动画循环
      stopAnimationLoop() {
        if (this.animationId) {
          cancelAnimationFrame(this.animationId);
          this.animationId = null;
        }
        this.isPlaying = false;
      }

      loadConfigAndInit() {
        try {
          const urlParams = new URLSearchParams(window.location.search);
          
          // 获取数据路径
          this.dataPaths.set1 = urlParams.get('data1') || 'demos/web_around30fps/172620-847860540_tiny.bin';
          this.dataPaths.set2 = urlParams.get('data2') || 'demos/davis/6.bin';
          
          // 获取视频路径
          this.videoPaths.set1 = urlParams.get('video1') || 'demos/web_around30fps/172620-847860540_tiny.mp4';
          this.videoPaths.set2 = urlParams.get('video2') || 'demos/davis/6.mp4';
          
          console.log('使用数据路径:', this.dataPaths);
          console.log('使用视频路径:', this.videoPaths);
          
          // 设置iframe源
          this.ui.iframe1.src = `viz_embed.html?data=${encodeURIComponent(this.dataPaths.set1)}&hideUI=true`;
          this.ui.iframe2.src = `viz_embed.html?data=${encodeURIComponent(this.dataPaths.set2)}&hideUI=true`;
          
          // 加载视频帧数据
          this.loadVideoFrames(0, this.videoPaths.set1);
          this.loadVideoFrames(1, this.videoPaths.set2);
          
          this.ui.loadingText.textContent = '加载组件...';
          
        } catch (error) {
          console.error('初始化错误:', error);
          this.ui.loadingText.textContent = `初始化错误: ${error.message}`;
        }
      }
      
      checkAllLoaded() {
        // 检查所有帧和iframe是否加载完成
        const allVideosLoaded = this.videoLoaded.every(loaded => loaded);
        const allIframesLoaded = this.iframeLoaded.every(loaded => loaded);
        
        console.log('加载状态:', {videos: this.videoLoaded, iframes: this.iframeLoaded});
        
        if (allVideosLoaded && allIframesLoaded) {
          console.log('所有组件加载完成。');
          
          setTimeout(() => {
            this.ui.loadingOverlay.classList.add('fade-out');
            
            // 初始化播放速率
            this.initPlaybackRates();
            
            // 开始自动播放
            setTimeout(() => this.playAll(), 300);
            
            // 发送所有设置到iframe
            this.sendAllSettings();
          }, 500);
        } else {
          console.log('仍在等待组件加载...');
        }
      }
      
      // 修改播放/暂停功能
      playAll() {
        this.startAnimationLoop();
        this.sendMessageToIframes({ command: 'play' });
        this.isPlaying = true;
        this.updatePlayPauseIcon();
      }
      
      pauseAll() {
        this.stopAnimationLoop();
        this.sendMessageToIframes({ command: 'pause' });
        this.isPlaying = false;
        this.updatePlayPauseIcon();
      }
      
      // Toggle playback state
      togglePlayback() {
        if (this.isPlaying) {
          this.pauseAll();
        } else {
          this.playAll();
        }
      }
      
      // Update play/pause button icon based on state
      updatePlayPauseIcon() {
        if (this.isPlaying) {
          this.ui.playIcon.classList.add('hidden-ui');
          this.ui.pauseIcon.classList.remove('hidden-ui');
        } else {
          this.ui.playIcon.classList.remove('hidden-ui');
          this.ui.pauseIcon.classList.add('hidden-ui');
        }
      }
      
      // 重置所有并回到第一帧
      resetVisualization() {
        // 停止播放
        const wasPlaying = this.isPlaying;
        this.stopAnimationLoop();
        
        // 重置为第一帧
        for (let i = 0; i < 2; i++) {
          this.currentFrameIndex[i] = 0;
          this.drawFrame(i, 0);
          
          // 同步iframe
          if (this.iframes[i] && this.iframes[i].contentWindow) {
            this.iframes[i].contentWindow.postMessage({ 
              command: 'seek', 
              payload: 0
            }, '*');
            
            this.iframes[i].contentWindow.postMessage({ 
              command: 'reset'
            }, '*');
          }
        }
        
        // 如果之前在播放，则继续播放
        if (wasPlaying) {
          setTimeout(() => this.playAll(), 100);
        }
      }
      
      // 发送消息到所有iframe
      sendMessageToIframes(message) {
        this.iframes.forEach(iframe => {
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(message, '*');
          }
        });
      }
      
      // 初始化播放速率
      initPlaybackRates() {
        console.log('初始化播放速率');
        for (let i = 0; i < 2; i++) {
          const iframe = this.iframes[i];
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage({
              command: 'setPlaybackRate',
              rate: this.playbackRate[i]
            }, '*');
            
            console.log(`设置数据集${i+1}的播放速率:`, this.playbackRate[i]);
          }
        }
      }
      
      // 更新视频播放速度
      updateVideoPlaybackRate(videoIndex, fps) {
        if (videoIndex < 0 || videoIndex >= 2) return;
        
        // 确保fps是数字且有效
        fps = Number(fps);
        if (isNaN(fps) || fps <= 0) {
          console.error('无效的FPS值:', fps);
          return;
        }
        
        // 更新fps
        this.fps[videoIndex] = fps;
        
        // 更新播放速率
        const baseFrameRate = 30;
        this.playbackRate[videoIndex] = fps / baseFrameRate;
        
        console.log(`已设置视频${videoIndex+1}帧率为 ${fps}fps, 播放速率为 ${this.playbackRate[videoIndex]}`);
        
        // 发送给iframe
        const iframe = this.iframes[videoIndex];
        if (iframe && iframe.contentWindow) {
          iframe.contentWindow.postMessage({
            command: 'setPlaybackRate',
            rate: this.playbackRate[videoIndex]
          }, '*');
          
          console.log(`已发送播放速率${this.playbackRate[videoIndex]}给数据集${videoIndex+1}`);
        }
      }
      
      // 发送所有设置到iframe (简化版)
      sendAllSettings() {
        const defaultSettings = {
          pointCloud: {
            size: 0.03,
            opacity: 1.0,
            maxDepth: 10.0
          },
          trajectory: {
            show: true,
            width: 3,
            markerSize: 0.01
          },
          keyframes: {
            show: true,
            interval: 20,
            opacity: 0.5
          },
          camera: {
            show: true,
            size: 0.2
          },
          playback: {
            fps: 30
          }
        };
        
        this.iframes.forEach(iframe => {
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage({
              command: 'updateSettings',
              settings: defaultSettings
            }, '*');
          }
        });
      }
    }
    
    // Initialize controller when DOM is ready
    window.addEventListener('DOMContentLoaded', () => {
      const controller = new PosterDemoManager();
    });
  </script>
</body>
</html> 